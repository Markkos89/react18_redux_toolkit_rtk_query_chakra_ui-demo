{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nexport const postsApi = createApi({\n  reducerPath: \"postsApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:5000\"\n  }),\n  tagTypes: [\"Posts\"],\n  endpoints: build => ({\n    // fetch all posts from the server\n    fetchAllPosts: build.query({\n      query: function () {\n        let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n        return {\n          url: \"/posts\",\n          method: \"GET\",\n          params: {\n            _limit: limit\n          }\n        };\n      },\n      providesTags: [\"Posts\"]\n    }),\n    // create a new post\n    createPost: build.mutation({\n      query: post => ({\n        url: \"/posts\",\n        method: \"POST\",\n        body: post\n      }),\n      invalidatesTags: [\"Posts\"]\n    }),\n    // update a post\n    updatePost: build.mutation({\n      query: post => ({\n        url: `/posts/${post.id}`,\n        method: \"PUT\",\n        body: post\n      }),\n      invalidatesTags: [\"Posts\"]\n    }),\n    // delete a post\n    deletePost: build.mutation({\n      query: post => ({\n        url: `/posts/${post.id}`,\n        method: \"DELETE\"\n      }),\n      invalidatesTags: [\"Posts\"]\n    })\n  })\n});","map":{"version":3,"sources":["C:/dino/react18_redux_toolkit_rtk_query_chakra_ui-demo/packages/app/src/services/PostsService.ts"],"names":["createApi","fetchBaseQuery","postsApi","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","build","fetchAllPosts","query","limit","url","method","params","_limit","providesTags","createPost","mutation","post","body","invalidatesTags","updatePost","id","deletePost"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,mCAA1C;AAGA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;AAChCG,EAAAA,WAAW,EAAE,UADmB;AAEhCC,EAAAA,SAAS,EAAEH,cAAc,CAAC;AACxBI,IAAAA,OAAO,EAAE;AADe,GAAD,CAFO;AAKhCC,EAAAA,QAAQ,EAAE,CAAC,OAAD,CALsB;AAMhCC,EAAAA,SAAS,EAAGC,KAAD,KAAY;AACrB;AACAC,IAAAA,aAAa,EAAED,KAAK,CAACE,KAAN,CAA6B;AAC1CA,MAAAA,KAAK,EAAE;AAAA,YAACC,KAAD,uEAAiB,CAAjB;AAAA,eAAwB;AAC7BC,UAAAA,GAAG,EAAE,QADwB;AAE7BC,UAAAA,MAAM,EAAE,KAFqB;AAG7BC,UAAAA,MAAM,EAAE;AACNC,YAAAA,MAAM,EAAEJ;AADF;AAHqB,SAAxB;AAAA,OADmC;AAQ1CK,MAAAA,YAAY,EAAE,CAAC,OAAD;AAR4B,KAA7B,CAFM;AAarB;AACAC,IAAAA,UAAU,EAAET,KAAK,CAACU,QAAN,CAA6B;AACvCR,MAAAA,KAAK,EAAGS,IAAD,KAAkB;AACvBP,QAAAA,GAAG,EAAE,QADkB;AAEvBC,QAAAA,MAAM,EAAE,MAFe;AAGvBO,QAAAA,IAAI,EAAED;AAHiB,OAAlB,CADgC;AAMvCE,MAAAA,eAAe,EAAE,CAAC,OAAD;AANsB,KAA7B,CAdS;AAuBrB;AACAC,IAAAA,UAAU,EAAEd,KAAK,CAACU,QAAN,CAA6B;AACvCR,MAAAA,KAAK,EAAGS,IAAD,KAAkB;AACvBP,QAAAA,GAAG,EAAG,UAASO,IAAI,CAACI,EAAG,EADA;AAEvBV,QAAAA,MAAM,EAAE,KAFe;AAGvBO,QAAAA,IAAI,EAAED;AAHiB,OAAlB,CADgC;AAMvCE,MAAAA,eAAe,EAAE,CAAC,OAAD;AANsB,KAA7B,CAxBS;AAiCrB;AACAG,IAAAA,UAAU,EAAEhB,KAAK,CAACU,QAAN,CAA6B;AACvCR,MAAAA,KAAK,EAAGS,IAAD,KAAkB;AACvBP,QAAAA,GAAG,EAAG,UAASO,IAAI,CAACI,EAAG,EADA;AAEvBV,QAAAA,MAAM,EAAE;AAFe,OAAlB,CADgC;AAKvCQ,MAAAA,eAAe,EAAE,CAAC,OAAD;AALsB,KAA7B;AAlCS,GAAZ;AANqB,CAAD,CAA1B","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\r\nimport { IPost } from \"../models/IPost\";\r\n\r\nexport const postsApi = createApi({\r\n  reducerPath: \"postsApi\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"http://localhost:5000\",\r\n  }),\r\n  tagTypes: [\"Posts\"],\r\n  endpoints: (build) => ({\r\n    // fetch all posts from the server\r\n    fetchAllPosts: build.query<IPost[], number>({\r\n      query: (limit: number = 5) => ({\r\n        url: \"/posts\",\r\n        method: \"GET\",\r\n        params: {\r\n          _limit: limit,\r\n        },\r\n      }),\r\n      providesTags: [\"Posts\"],\r\n    }),\r\n\r\n    // create a new post\r\n    createPost: build.mutation<IPost, IPost>({\r\n      query: (post: IPost) => ({\r\n        url: \"/posts\",\r\n        method: \"POST\",\r\n        body: post,\r\n      }),\r\n      invalidatesTags: [\"Posts\"],\r\n    }),\r\n\r\n    // update a post\r\n    updatePost: build.mutation<IPost, IPost>({\r\n      query: (post: IPost) => ({\r\n        url: `/posts/${post.id}`,\r\n        method: \"PUT\",\r\n        body: post,\r\n      }),\r\n      invalidatesTags: [\"Posts\"],\r\n    }),\r\n\r\n    // delete a post\r\n    deletePost: build.mutation<IPost, IPost>({\r\n      query: (post: IPost) => ({\r\n        url: `/posts/${post.id}`,\r\n        method: \"DELETE\",\r\n      }),\r\n      invalidatesTags: [\"Posts\"],\r\n    }),\r\n  }),\r\n});\r\n"]},"metadata":{},"sourceType":"module"}