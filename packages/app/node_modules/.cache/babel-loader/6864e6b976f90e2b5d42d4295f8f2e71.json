{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n// Can be used as option,\n// but there is need to handle repeated requests (service/API approach can handle those)\n// for example, now users are loaded every time when component is mounted\n// which is not good, because there is no caching\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async (_, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const response = await axios.get(\"https://jsonplaceholder.typicode.com/users?_limit=20\");\n    return response.data;\n  } catch (error) {\n    return rejectWithValue(\"Could not fetch users...\");\n  }\n});\nexport const asyncUserActions = {\n  fetchUsers\n};","map":{"version":3,"sources":["C:/dino/react18_redux_toolkit_rtk_query_chakra_ui-demo/packages/app/src/redux/reducers/users/ActionCreators.ts"],"names":["createAsyncThunk","axios","fetchUsers","_","rejectWithValue","response","get","data","error","asyncUserActions"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CACxC,kBADwC,EAExC,OAAOG,CAAP,WAAkC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AAChC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CACrB,sDADqB,CAAvB;AAGA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,WAAOJ,eAAe,CAAC,0BAAD,CAAtB;AACD;AACF,CAXuC,CAAnC;AAcP,OAAO,MAAMK,gBAAgB,GAAG;AAC9BP,EAAAA;AAD8B,CAAzB","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { IUser } from \"../../../models/IUser\";\r\n\r\n// Can be used as option,\r\n// but there is need to handle repeated requests (service/API approach can handle those)\r\n// for example, now users are loaded every time when component is mounted\r\n// which is not good, because there is no caching\r\nexport const fetchUsers = createAsyncThunk(\r\n  \"users/fetchUsers\",\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get<IUser[]>(\r\n        \"https://jsonplaceholder.typicode.com/users?_limit=20\"\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(\"Could not fetch users...\");\r\n    }\r\n  }\r\n);\r\n\r\nexport const asyncUserActions = {\r\n  fetchUsers,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}